<?php

/**
 * @file
 * A field using the Field API.
 * */
/**
 * @file
 * An example field using the Field API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display)
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * *
 * See @link field_types Field Types API @endlink
 */
/* * *************************************************************
 * Field Type API hooks
 * ************************************************************* */

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function compound_field_field_info() {
  return array(
    'compound_field' => array(
      'label' => t('Compound Field'),
      'description' => t('This field a title and a body in the database.'),
      'settings' => array('max_length' => ''),
      'default_widget' => 'compound_text',
      'default_formatter' => 'compound_field_formatter',
    ),
  );
}

/**
 * Implements hook_field_validate().
 */
function compound_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['text']) && !empty($item['content'])) {

    }
  }
}

/**
 * Implements hook_is_empty().
 */
function compound_field_field_is_empty($item, $field) {
  $test = empty($item['text']);
  $sec = empty($item['content']);

  return empty($item['content']) && empty($item['text']);
}

/* * *********************************************************************
 *  Field Type API: Formatter
 *
 *  These are the api hooks that present formatted (themed) output to the
 *  user.
 * ******************************************************************** */

/**
 * Implements hook_field_formatter_info().
 */
function compound_field_field_formatter_info() {
  return array(
    'compound_field_formatter_text' => array(
      'label' => t('Compound Field text'),
      'field types' => array('compound_field'),
      'multiple values' => FIELD_BEHAVIOR_DEFAULT,
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function compound_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  switch ($display['type']) {
    case 'compound_field_formatter_text':
      //this formater output the field as text
      foreach ($items as $delta => $item) {
        $elements[$delta]['#markup'] = '<div class="compound-title">' . $item['title'] . '</div>';
        $elements[$delta]['#markup'] .= '<div class="compound-title">' . $item['content'] . '</div>';
      }

      break;
  }

  return $elements;
}

/* * ************************************************************************
 * Field Type API: Widget
 *
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 * ************************************************************************ */

/**
 * Implements hook_field_widget_info().
 */
function compound_field_field_widget_info() {
  return array(
    'compound_field_text' => array(
      'label' => 'Compound Textarea',
      'field types' => array('compound_field'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function compound_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element += array(
    '#delta' => $delta,
  );
  $element['compound_field'] = array();

  switch ($instance['widget']['type']) {

    case 'compound_field_text':

      // A fieldset to hold the two texts fields.
      $element += array(
        '#type' => 'fieldset',
        '#delta' => $delta,
      );

      $element['title'] = array(
        '#type' => 'textfield',
        '#title' => t('Title'),
        '#size' => 255,
      );
      $element['content'] = array(
        '#type' => 'textarea',
        '#title' => t('Content'),
        '#rows' => 5,
      );
      break;
  }
  return $element;
}
